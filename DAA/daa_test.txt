---------------------------- Bibliotecas ----------------------------
import java.util.*;
import java.io.*;
import java.util.TreeMap;
import java.util.Map;
---------------------------- Main ----------------------------
class ex1 {
    public static void main(String[] args) {
    }
}
---------------------------- DFS ----------------------------
-> Algoritmo base
public class DFS {
    static int n;              // Numero de nos do grafo
    static boolean adj[][];    // Matriz de adjacencias
    static boolean visited[];  // Que nos ja foram visitados?

    static void dfs(int v) {
        System.out.print(v + " ");
	    visited[v] = true;
        for (int i=1; i<=n; i++)
	        if (adj[v][i] && !visited[i])
                dfs(i);
    }
    
    public static void main(String args[]) {
        Scanner stdin = new Scanner(System.in);
        n = stdin.nextInt();
        adj     = new boolean[n+1][n+1];
        visited = new boolean[n+1];	
        int edges = stdin.nextInt();	
        for (int i=0; i<edges; i++) {
            int a = stdin.nextInt();
            int b = stdin.nextInt();
            adj[a][b] = adj[b][a] = true;
        }
        dfs(1); // Pesquisa em profundidade a partir do no 1     
        FastPrint.out.close();       
    }
}
--------------------------------------------------------
-> Componentes Conexos - Funçaõ dfs igual

for (int i=1; i <= n; i++) { 
        if (!visited[i]) {
            count++; //Pormenor a ter em conta para saber se é componente conexo 
            dfs(i);
        }
    }
    System.out.println(count);
}
--------------------------------------------------------
-> Flood Fill - Guardar "manchas conexas" ou 
                calcular o maior tamanho dessas manchas

class daa026 {
    static int n;
    static int rows;
    static int cols;
    static char[][] matrix;
    static boolean[][] visited;
    static int aux;
    static int max;

    static int dfs(int y, int x) {
        if (y<0 || y>=rows || x<0 || x>=cols) return 0; 
        if (visited[y][x]) return 0;
        if (matrix[y][x] == '.') return 0;
        visited[y][x] = true;
        int count = 1;
        count += dfs(y-1, x);
        count += dfs(y+1, x);
        count += dfs(y, x+1);
        count += dfs(y, x-1); 
        count += dfs(y+1, x+1);
        count += dfs(y-1, x-1);
        count += dfs(y+1, x-1);
        count += dfs(y-1, x+1);
        return count;        
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        n = in.nextInt();

        for (int k=0; k < n; k++) {
            rows = in.nextInt(); cols = in.nextInt();
            matrix = new char[rows][cols];
            visited = new boolean[rows][cols];
            max = Integer.MIN_VALUE;
            aux = 0;
            for (int i=0; i < rows; i++) {
                matrix[i] = in.next().toCharArray();
            }
            for (int j=0; j < rows; j++) {
                for (int w=0; w < cols; w++) {
                    aux = dfs(j,w);
                    if (aux >= max) max = aux;
                }
            }
            System.out.println(max);
        }
    }
}
--------------------------------------------------------
-> Grafo bipartido

class daa027 {
    static int n;
    static int v;
    static int e;
    static boolean[] visited;
    static boolean[][] adj;
    static String[] color;
    static int aux;

    static void dfs(int w) {
        visited[w] = true;
        for (int i=1; i<=v; i++) {
            if (adj[w][i] && !visited[i]) {
                if (color[w].equals("Green")) {
                    color[i] = "Red";
                    dfs(i);
                }
                else if (color[w].equals("Red")) {
                    color[i] = "Green";
                    dfs(i);
                }
            }
            if (visited[i] && adj[w][i]) {
                if (color[w].equals(color[i])) {
                    aux = -1;
                }
                if (color[w].equals("Black")) {
                    if (color[i].equals("Green")) color[w] = "Red";
                    else                          color[w] = "Green";
                }
            }
        }
    }     
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        n = in.nextInt();

        for (int i=0; i < n; i++) {
            v = in.nextInt();
            e = in.nextInt();
            visited = new boolean[v+1];
            adj = new boolean[v+1][v+1];
            color = new String[v+1];
            aux = 0;
            for (int j=1; j <= v; j++)
                color[j] = "Black";
            color[1] = "Red";
            for (int j=1; j <= e; j++) {
                int a = in.nextInt();
                int b = in.nextInt();
                adj[a][b] = adj[b][a] = true;
            }
            for (int k=1; k <= v; k++) {
                if (!visited[k]) {
                    dfs(k);
                }
            }
            if (aux < 0) System.out.println("nao");
            else         System.out.println("sim");
        }
    }
}
--------------------------------------------------------
-> Ordem topológica 
class daa029 {
    static int n;
    static boolean[][] adj;
    static boolean[] visited;
    static boolean[] exist;
    static String[] p;
    static LinkedList<Character> order;

    static int size(int fstSize, int secSize) {
        if (fstSize >= secSize) return secSize;
        return fstSize;
    }

    static void dfs(int v) {
        visited[v] = true;
        for (int i=0; i < 26; i++) {
            if (adj[v][i] && !visited[i]) {
                dfs(i);
            }
        }
        order.addFirst((char)(v+'A')); //ordem topológica
    }
    public static void main(String[] args) {
        FastScanner in = new FastScanner(System.in);
        n = in.nextInt();

        order = new LinkedList<>();
        adj = new boolean[27][27];
        visited = new boolean[27];
        exist = new boolean[27];
        p = new String[n];

        for (int i=0; i < n; i++) {
            p[i] = in.nextLine();
            //System.out.println(p[i]);
        }

        //Ordem topológica
        for (int i=0; i < n-1; i++) {
            int aux = size(p[i].length(), p[i+1].length());
            for (int j=0; j < aux; j++) {
                if (p[i].charAt(j) != p[i+1].charAt(j)) {   
                    System.out.println(p[i].charAt(j) + " -> " + p[i+1].charAt(j));
                    adj[p[i].charAt(j) - 'A'][p[i+1].charAt(j) - 'A'] = true; //adj não para os dois sentidos
                    exist[p[i].charAt(j) - 'A'] = exist[p[i+1].charAt(j) - 'A'] = true;
                    break;
                }
            }
        }

        for (int i=0; i < 26; i++) 
            if (!visited[i])
                dfs(i);
        
        for (char c : order)
            if (exist[c - 'A'])
                System.out.print(c);
        System.out.println();
    }
}
--------------------------------------------------------
-> Deteção de Ciclos
    cor[i ∈ V] = branco 
    for (int i=1; i <= v; i++) {
        if (cor[i] == branco)
            dfs(i);
    }
    dfs(nó v) {
        cor[v] = cinzento;
        for (int i=1; i <= v; i++) {
            if (adj[v][i])
                if (cor[i] == cinzento) sysout("Ciclo encontrado");
            else if (cor[i] == branco) dfs(i);
        }
        cor[v] = preto;
    }
--------------------------------------------------------
-> Componentes Fortemente Conexos
    index = 0; S.size() = 0;
    for (int i=1; i <= v; i++) 
        if (num[i] ainda não está definido) dfs_cfc(i);
    
    dfs_cfc(nó v) {
        num[v] = low[v] = index; index = index + 1; S.push(v);
        //Percorrer arestas de v
        for (int i=1; i <= v; i++) {
            if (num[i] ainda não está definido) //Tree Edge
                dfs_cfc(i); low[v] = min(low[v], low[i]);
                if (low[i] >= num[v]) escrever(v + "é um ponto de articulação"); //Descobrir ponto de articulação
            else if (i está em S) //Back Edge
                low[v] = min(low[v], low[i]);
        }
        //Se quisermos descobrir ponto de articulação
        //não fazemos o if de baixo e fazemos S.pop()
        if (num[v] = low[v]) {
            Começar novo CFC C
            Repetir
                w = S.pop(); //Adicionar w a C
            Até w = v;
            Escrever C;
        }
    }
---------------------------- BFS ----------------------------
// Classe que representa um no
class Node {
    public LinkedList<Integer> adj; // Lista de adjacencias
    public boolean visited;         // Valor booleano que indica se foi visitado numa pesquisa
    public int distance;            // Distancia ao no origem da pesquisa

    Node() {
	    adj = new LinkedList<Integer>();
    }
}

// Classe que representa um grafo
class Graph {
    int n;           // Numero de nos do grafo
    Node nodes[];    // Array para conter os nos

    Graph(int n) {
        this.n = n;
        nodes  = new Node[n+1]; // +1 se nos comecam em 1 ao inves de 0
        for (int i=1; i<=n; i++)
            nodes[i] = new Node();
    }

    public void addLink(int a, int b) {
	    nodes[a].adj.add(b);
	    nodes[b].adj.add(a);
    }

    // Algoritmo de pesquisa em largura
    public void bfs(int v) {
        LinkedList<Integer> q = new LinkedList<Integer>();
        for (int i=1; i<=n; i++) nodes[i].visited = false;

        q.add(v);
        nodes[v].visited = true;
        nodes[v].distance = 0;

        while (q.size() > 0) {
            int u = q.removeFirst();
            System.out.println(u + " [dist=" + nodes[u].distance + "]");
            for (int w : nodes[u].adj)
                if (!nodes[w].visited) {
                    q.add(w);
                    nodes[w].visited  = true;
                    nodes[w].distance = nodes[u].distance + 1; 
                }	    
        }
    }
}

public class BFS {
    public static void main(String args[]) {
	Scanner in = new Scanner(System.in);

	Graph g = new Graph(in.nextInt());
	int   e = in.nextInt();
	for (int i=0; i<e; i++) 
	    g.addLink(in.nextInt(), in.nextInt());

	// Pesquisa em largura a partir do no 1
	g.bfs(1);		
    }
}
--------------------------------------------------------
-> Pesquisa em Largura
-> Algoritmo
    bfs(nó v) {
        q.size() = 0; //Fila de nós não visitados
        q.enqueue(v);
        //nodes[v].distance = 0; //usada se queremos calcular distâncias //distância de v a si próprio é zero
        nodes[v].visited = true;
        while (q.size() > 0) {
            int u = q.dequeue();
            for (int w : nodes[u].adj) 
                if (!nodes[w].visited) {
                    q.enqueue(w);
                    nodes[w].visited = true;
                    //nodes[w].distance = nodes[u].distance + 1; //usada se queremos calcular distâncias
                }
        }
    }
--------------------------------------------------------
-> Calcular caminhos possíveis entre nós (na forma de uma matriz)
class Node -> igual a BFS
// Classe que representa um grafo
class Graph {
    int n;           // Numero de nos do grafo
    Node nodes[];    // Array para conter os nos
    int max = Integer.MIN_VALUE;
    int min = Integer.MAX_VALUE;
    int[][] matrix;
    int[] maxDist;

    Graph(int n) {
        this.n = n;
        nodes  = new Node[n+1]; // +1 se nos comecam em 1 ao inves de 0
        for (int i=1; i<=n; i++)
            nodes[i] = new Node();
        matrix = new int[n+1][n+1];
        maxDist = new int[n+1];
    }

    public void addLink(int a, int b) {
        nodes[a].adj.add(b);
        nodes[b].adj.add(a);
    }

    // Algoritmo de pesquisa em largura
    public void bfs(int v) {
        LinkedList<Integer> q = new LinkedList<Integer>();
        for (int i=1; i<=n; i++) nodes[i].visited = false;
    
        q.add(v);
        nodes[v].visited = true;
        nodes[v].distance = 0;

        matrix[v][v] = 0;
        maxDist[v] = 0;
    
        while (q.size() > 0) {
            int u = q.removeFirst();
            //System.out.println(u + " [dist=" + nodes[u].distance + "]");
            for (int w : nodes[u].adj)
            if (!nodes[w].visited) {
                q.add(w);
                nodes[w].visited  = true;
                nodes[w].distance = nodes[u].distance + 1;
                matrix[v][w] = nodes[w].distance; 

                if (maxDist[v] < nodes[w].distance) {
                    maxDist[v] = nodes[w].distance;
                    //System.out.println(maxDist[v]);
                }
            }	    
        }
        if (max < maxDist[v]) max = maxDist[v];
        if (min > maxDist[v]) min = maxDist[v];
    }
}

public class daa030 {
    static int n;
    static int e;
    static int count;
    
    public static void main(String[] args) {
        FastScanner in = new FastScanner(System.in);
        n = in.nextInt();
        Graph g = new Graph(n);
        e = in.nextInt();
        int count = 0;
        for (int i=0; i < e; i++) 
            g.addLink(in.nextInt(), in.nextInt());

        for (int i=1; i <= n; i++) 
            g.bfs(i);
        
        System.out.println(g.max); //diâmetro 
        System.out.println(g.min); //raio

        for (int i = 1; i <= n; i++) {  //nós centrais
            if (g.maxDist[i] == g.min && count == 0) {
                System.out.print(i);
                count++;
            }

            else if (g.maxDist[i] == g.min)
                System.out.print(" " + i);

            else if (i == n && g.maxDist[i] == g.min)
                System.out.print(i);   
        }

        System.out.println();
        count = 0;

        for (int i = 1; i <= n; i++) { //nós periféricos
            if (g.maxDist[i] == g.max && count == 0) {
                System.out.print(i);
                count++;
            } 
            else if (g.maxDist[i] == g.max)
                System.out.print(" " + i);

            else if (i == n && g.maxDist[i] == g.min)
                System.out.print(i);
        }

        System.out.println();
        /*for (int i=1; i <= n; i++) { //ler matriz
            for (int j=1; j <= n; j++)
                System.out.print(g.matrix[i][j] + " ");
            System.out.println();
        }*/
    }
}

--------------------------------------------------------
-> BFS 2D Grid

class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class daa031 {
    static int l;
    static int c;
    static char[][] matrix;
    static int num_nuvens;
    static boolean[][] visited;
    static int[][] distance;

    public static void bfs(int x, int y) {
        LinkedList<Point> q = new LinkedList<Point>();
        //FastPrint.out.println(x + " " + y);

        for (int i=0; i < l; i++) 
            for (int j=0; j < c; j++) {
                if (matrix[i][j] == '#') { 
                    //FastPrint.out.println(i + " " + j);
                    Point p = new Point(i,j);
                    q.add(p);
                    distance[i][j] = 0;
                    visited[i][j] = true;
                }
            }
        
        while (q.size() > 0) {
            Point aux = q.removeFirst();
            int abc = aux.x;
            int ord = aux.y;
            //System.out.println(abc + " " + ord);
            if (abc + 1 < l && !visited[abc+1][ord]) { //deslocamento para baixo
                //int ans = abc+1;
                //FastPrint.out.println("x = " + abc + " y = " + ord);
                distance[abc+1][ord] = distance[abc][ord] + 1;
                //FastPrint.out.println("pra baixo, x = " + ans + " y = " + ord + " dist = " + distance[ans][ord]);
                visited[abc+1][ord]  = true;
                Point novo       = new Point(abc+1, ord);
                q.add(novo); 
            }
            if (abc - 1 >= 0 && !visited[abc-1][ord]) { //deslocamento para cima
                distance[abc-1][ord] = distance[abc][ord] + 1;
                visited[abc-1][ord]  = true;
                Point novo = new Point(abc-1, ord);
                q.add(novo); 
            }
            if (ord + 1 < c && !visited[abc][ord+1]) { //deslocamento direita
                int ans = ord+1;
                //FastPrint.out.println("x = " + abc + " y = " + ord);
                distance[abc][ord+1] = distance[abc][ord] + 1;
                visited[abc][ord+1]  = true;
                Point novo       = new Point(abc, ord+1);
                q.add(novo);
            } 
            if (ord - 1 >= 0 && !visited[abc][ord-1]) { //deslocamento esquerda
                distance[abc][ord-1] = distance[abc][ord] + 1;
                visited[abc][ord-1]  = true;
                Point novo       = new Point(abc, ord-1);
                q.add(novo);
            }
        }
    }
    public static void main(String[] args){
        FastScanner in = new FastScanner(System.in);

        l = in.nextInt();
        c = in.nextInt();
        matrix = new char[l+1][c+1];
        visited = new boolean[l+1][c+1];
        distance = new int[l+1][c+1];
        int fstCloud = 0;
        int row = 0;
        int col = 0;

        for (int i=0; i < l; i++) 
            matrix[i] = in.next().toCharArray();
        
        for(int i=0; i < l; i++) {
            for(int j=0; j < c; j++) {
                if (fstCloud == 0 && matrix[i][j] == '#') {
                    bfs(i,j);
                    fstCloud = 1;
                }
               // FastPrint.out.print(matrix[i][j]);
            }
            //FastPrint.out.println();
        }
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int ans;
        for (int i=0; i < l; i++)
            for (int j=0; j < c; j++) {
                if (matrix[i][j] == 'A') {
                    ans = distance[i][j];
                    if (ans > max) max = ans;
                    if (ans < min) min = ans;
                }
            }
        FastPrint.out.println(min + " " + max);
        FastPrint.out.close();
    }   
}

---------------------------- Dijkstra ----------------------------

// Classe que representa uma aresta
class Edge {
    int to;     // No destino
    int weight; // Peso da aresta, pode ser double!
    //int pred; caso queiramos os predecessores
    
    Edge(int t, int w/*, int p*/ { //w pode ser double
	    to = t;
	    weight = w;
        //pred = p;
    }
}

// Classe que representa um no
class Node {
    public LinkedList<Edge> adj; // Lista de adjacencias
    public boolean visited;      // No ja foi visitado?
    public int distance;         // Distancia ao no origem da pesquisa, pode ser double
    
    Node() {
	    adj = new LinkedList<>();
    } 
};

// Classe que representa um no para ficar na fila de prioridade
class NodeQ implements Comparable<NodeQ> {
    public int cost; //pode ser double
    public int node;

    NodeQ(int c, int n) { //c pode ser double
	    cost = c;
	    node = n;
    }

    @Override
    public int compareTo(NodeQ nq) { 
        if (cost < nq.cost) return -1; 
        if (cost > nq.cost) return +1;
        if (node < nq.node) return -1; 
        if (node > nq.node) return +1;
        return 0; 
    } 
}

// Classe que representa um grafo
class Graph {
    int n;          // Numero de nos do grafo
    Node[] nodes;   // Array para conter os nos
    
    Graph(int n) {
        this.n = n;
        nodes = new Node[n+1];  // +1 se os nos comecam em 1 ao inves de 0
        for (int i=1; i<=n; i++)
            nodes[i] = new Node();
    }
    
    void addLink(int a, int b, int c) { //se foi alterado para double, c também tem que ser alterado
	    nodes[a].adj.add(new Edge(b, c));
        //nodes[b].adj.add(new Edge(a,c)); se for necessário
    }

    // Algoritmo de Dijkstra
    void dijkstra(int s) {
	
        //Inicializar nos como nao visitados e com distancia infinita
        for (int i=1; i<=n; i++) {
            nodes[i].distance = Integer.MAX_VALUE;
            nodes[i].visited  = false;
        }
        
        // Inicializar "fila" com no origem
        nodes[s].distance = 0;
        //nodes[s].pred = s; //predecessores
        TreeSet<NodeQ> q = new TreeSet<>();
        q.add(new NodeQ(0, s)); // Criar um par (dist=0, no=s)

        // Ciclo principal do Dijkstra
        while (!q.isEmpty()) {
        
            // Retirar no com menor distancia (o "primeiro" do set, que e uma BST)
            NodeQ nq = q.pollFirst();
            int  u = nq.node;
            nodes[u].visited = true;
            System.out.println(u + " [dist=" + nodes[u].distance + "]");
            
            // Relaxar arestas do no retirado
            for (Edge e : nodes[u].adj) {
                int v = e.to;
                int cost = e.weight; //ver se weight não foi alterado para double
                if (!nodes[v].visited && nodes[u].distance + cost < nodes[v].distance) {
                    q.remove(new NodeQ(nodes[v].distance, v)); // Apagar do set
                    nodes[v].distance = nodes[u].distance + cost;
                    //nodes[v].pred = u; //predecessores
                    q.add(new NodeQ(nodes[v].distance, v));    // Inserir com nova (e menor) distancia
                }
            }
        }
    }
};

public class dijkstra {
    public static void main(String args[]) {
	Scanner in = new Scanner(System.in);
	Graph g = new Graph(in.nextInt());
	int   e = in.nextInt();
	for (int i=0; i<e; i++) 
	    g.addLink(in.nextInt(), in.nextInt(), in.nextInt());

	// Execucao exemplo a partir do no 1
	g.dijkstra(1);
    }
}

--------------------------------------------------------
-> Calcular a distância mínima
Classe Edge, Node, NodeQ e Graph iguais (ou com double)

    // Algoritmo de Dijkstra
    void dijkstra(int s) {
	
        //Inicializar nos como nao visitados e com distancia infinita
        Ver em cima

        // Inicializar "fila" com no origem
        Ver em cima

        // Ciclo principal do Dijkstra
        Ver em cima 
        
        //Calcular a distância mínima é calcular a última posiçaõ
        //se for assim inicializada na main (TreeMap)
        int aux = nodes.length-1;
        System.out.printf("%.1f", nodes[aux].distance);
        System.out.println();
    }
};

class daa033 {
    static int n;
    static int e;
    public static void main(String[] args) {
        FastScanner in = new FastScanner(System.in);
        TreeMap<String, Integer> map = new TreeMap<>();
        n = in.nextInt();
        e = in.nextInt();
        Graph g = new Graph(n);
        String inicio = in.next();
        String fim    = in.next(); 
        map.put(inicio, 1); //start
        map.put(fim, n); //end
        int count = 2; //porque já temos o nó 1

        for (double i=0; i < e; i++) {
            String start = in.next(); //primeira cidade a ser lida
            String end   = in.next(); //segunda cidade a ser lida
            double dist     = in.nextDouble();
            Integer j = map.get(start); 
            Integer k = map.get(end); 
            if (j == null) { //dar um valor ao nó se o lugar não existe
                map.put(start, count);
                count++;
            } 
            if (k == null) { //dar um valor ao nó se o lugar não existe
                map.put(end, count);
                count++;
            }
            //System.out.println(map.get(start) + " -> " + map.get(end) + " => " + dist);
            g.addLink(map.get(start), 
                      map.get(end),
                      dist);
        }
        g.dijkstra(1); //basta irmos desde o início, porque sabemos que é obrigatório lá começar
        //System.out.println(g.max);
    }
}

--------------------------------------------------------
-> Fecho transitivo - deverá ser adaptado em dijkstra (sem main)
Classe Edge, Node, NodeQ iguais
Classe Graph criar e inicializar uma matriz de booleanos, 
como é fecho transitivo não esquecer: nodes[a].adj.add(new Edge(a, c)) no addLink
-> Algoritmo floydWarshall
    void floydWarshall() {
        for (int i=1; i <= n; i++) 
            matrix[i][i] = true;

        for (int i=1; i <= n; i++) 
            for (Edge e : nodes[i].adj) 
                matrix[i][e.to] = true;

        for (int k=1; k <= n; k++) 
            for (int i=1; i <= n; i++)
                for (int j=1; j <= n; j++)
                    if (matrix[i][k] && matrix[k][j]) 
                        matrix[i][j] = true;
        
        char count = 65;
        System.out.print("  ");
        for (int i=1; i <= n; i++) {
            city[i] = String.valueOf(count);
            if (i == n) System.out.print(city[i]);
            else        System.out.print(city[i] + " ");
            count++;
        }
        System.out.println();

        for (int i=1; i <= n; i++){
            System.out.print(city[i] + " ");
            for (int j=1; j <= n; j++) {
                if (matrix[i][j]) { 
                    if (j == n) System.out.print("1");
                    else System.out.print("1 ");
                }
                else {
                    if (j == n) System.out.print("0");
                    else System.out.print("0 ");
                }
            }
            System.out.println();
        }
    }
};

-------------------------------------------------------- 
-> BFS - labirinto (exemplo)

class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class lab {
    static int l;
    static int c;
    static char[][] matrix;
    static boolean[][] visited;
    static int[][] distance;

    public static void bfs(int x, int y) {
        LinkedList<Point> q = new LinkedList<Point>();

        q.add(new Point(x,y));

        for (int i=0; i < l; i++) 
            for (int j=0; j < c; j++) 
                if (matrix[i][j] == '#') 
                    visited[i][j] = true;

        while (q.size() > 0) {
            Point p = q.removeFirst();
            int abc = p.x;
            int ord = p.y;
            if (abc + 1 < l && !visited[abc+1][ord]) {
                //FastPrint.out.println(abc + " " + ord);
                distance[abc+1][ord] = distance[abc][ord] + 1;
                visited[abc+1][ord]  = true; 
                Point aux = new Point(abc+1, ord);
                q.add(aux);
            }
            if (abc - 1 >= 0 && !visited[abc-1][ord]) {
                distance[abc-1][ord] = distance[abc][ord] + 1;
                visited[abc-1][ord]  = true;
                Point aux = new Point(abc-1, ord);
                q.add(aux);
            }
            if (ord + 1 < c && !visited[abc][ord+1]) {
                //FastPrint.out.println(abc + " " + ord);
                distance[abc][ord+1] = distance[abc][ord] + 1;
                visited[abc][ord+1]  = true;
                Point aux = new Point(abc, ord+1);
                q.add(aux);
            }
            if (ord - 1 >= 0 && !visited[abc][ord-1]) {
                distance[abc][ord-1] = distance[abc][ord] + 1;
                visited[abc][ord-1]  = true;
                Point aux = new Point(abc, ord-1);
                q.add(aux);
            }
        }
    }
    public static void main(String[] args) {
        FastScanner in = new FastScanner(System.in);
        l = in.nextInt();
        c = in.nextInt();
        matrix = new char[l+1][c+1];
        visited = new boolean[l+1][c+1];
        distance = new int[l+1][c+1];
        int row = 0;
        int col = 0;
        for (int i=0; i < l; i++) 
            matrix[i] = in.next().toCharArray();
        
        for (int i=0; i < l; i++) {
            for (int j=0; j < c; j++) 
                if (matrix[i][j] == 'P') {
                    row = i;
                    col = j; 
                    distance[i][j] = 0;
                }         
        }
        bfs(row, col);
        for (int i=0; i < l; i++)
            for (int j=0; j < c; j++) {
                if (matrix[i][j] == 'C')
                    FastPrint.out.println(distance[i][j]);
            }
        FastPrint.out.close();
    }
}